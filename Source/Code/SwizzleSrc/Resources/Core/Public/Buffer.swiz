// Buffer.swiz
// SwizzleSrc
//
// Created by Ethan Uppal on 1/25/19.
// Copyright Â© 2019 Ethan Uppal. All rights reserved.
//

@__magic("core.buffer")
class Buffer<E>: AppendableCollection {
    private ref _storage: Pointer;
    ref count: Int;
    static init() {
        self.count = 0;
        let alignment = __alignmentOf(E);
        self._storage = Pointer.allocate(0, alignment);
    }
    // Sequence
    func iterator() -> BufferIterator<E> {
        return BufferIterator<E>(self, 0);
    }
    // Collection
    func subscript(index: Int) -> E {
        _checkIndex(index);
        return _storage::strided(index).pointee;
    }
    func store(value: E, index: Int) {
        _checkIndex(index);
        self._storage::strided(index).set(value);
    }
    func add(value: E) {
        self.count += 1;
        realloc(_storage, self.count);
        self._storage::strided(self.count).initialize(value);
    }

    // Trapping
    func _checkIndex(index: Int) {
        assert(index < self.count, "Index out of bounds");
    }

    // Deinit
    func deinit() {
        self._storage::dealloc();
    }
}
